# -*- coding: utf-8 -*-
"""cadim pneumonia lbl RAUNET

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_rjmMTLespZytwl5bFMe-ao7lI--OzeQ
"""

import datetime
# Commented out IPython magic to ensure Python compatibility.
# % pip install -q jarvis-md
# % pip install -q tensorflow-model-optimizationpi
import os

import numpy as np
from numpy.core.arrayprint import StructuredVoidFormat
import tensorflow as tf
from tensorflow import optimizers, losses
from tensorflow.keras import Input, layers, Model

# import tensorflow_addons as tfa
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
# tf.compat.v1.disable_eager_execution()
from jarvis.train import datasets, params, custom
from jarvis.train.client import Client
from jarvis.utils.general import overload #gpus

#gpus.autoselect(1)

@overload(Client)
def preprocess(self, arrays, **kwargs):
    msk = np.zeros(arrays['xs']['dat'].shape)
    lng = arrays['xs']['lng'] > 0
    lbl = arrays['ys']['lbl'] > 0
    msk[lng] = 1.0
    # msk[lbl] = 10.0
    # arrays['ys']['lbl'][lbl] = 1.0
    arrays['xs']['lng'] = msk
    arrays['xs']['dat'] *= p['negative']
    return arrays


paths = datasets.download(name='ct/organ-chest-abd')
p = params.load(csv='./hyper.csv', row=0)
configs = {'batch': {'size': p['batch_size'], 'fold': 0}}
MODEL_NAME = '{}/ckp/model.h5'.format(p['output_dir'])
path = '{}/data/ymls/client-lung.yml'.format(paths['code'])
client = Client(path, configs=configs)
gen_train, gen_valid = client.create_generators()


# path2 = '{}/data/ymls/client-uci.yml'.format(paths['code'])
# client2 = Client(path2, configs={'batch': {'size': 1, 'fold': -1}})
# gen_valid, _ = client2.create_generators()

inputs = client.get_inputs(Input)

log_dir = "{}/logs/".format(p['output_dir']) + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
if (not os.path.isdir(log_dir)):
    os.makedirs(log_dir)


def dsc_soft(weights=None, scale=1.0, epsilon=0.01, cls=1):
    @tf.function
    def dsc(y_true, y_pred):
        true = tf.cast(y_true[..., 0] == cls, tf.float32)
        pred = tf.nn.softmax(y_pred, axis=-1)[..., cls]
        if weights is not None:
            true = true * (weights[...])
            pred = pred * (weights[...])
        A = tf.math.reduce_sum(true * pred) * 2
        B = tf.math.reduce_sum(true) + tf.math.reduce_sum(pred) + epsilon
        return (1.0 - A / B) * scale
    return dsc


def sce(weights=None, scale=1.0):
    loss = losses.SparseCategoricalCrossentropy(from_logits=True)
    @tf.function
    def sce(y_true, y_pred):
        return loss(y_true=y_true, y_pred=y_pred, sample_weight=weights) * scale
    return sce


def happy_meal(weights=None, alpha=5, beta=1,  epsilon=0.01, cls=1):
    l2 = sce(None, alpha)
    l1 = dsc_soft(weights, beta, epsilon, cls)
    @tf.function
    def calc_loss(y_true, y_pred):
        return l2(y_true, y_pred) + l1(y_true, y_pred)
    return calc_loss



def train():
    model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
        filepath='{}/ckp/'.format(p['output_dir']),
        monitor='val_dsc_1',
        mode='max',
        save_best_only=True)

    #tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir)

    reduce_lr_callback = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_dsc_1', factor=0.8, patience=2, mode="max",
                                                              verbose=1)
    early_stop_callback = tf.keras.callbacks.EarlyStopping(monitor='val_dsc_1', patience=5, verbose=0, mode='max',
                                                           restore_best_weights=False)

    model = dense_unet(inputs, 64)
    #model = da_unet(inputs)
    print(model.summary())
    model.compile(
        optimizer=optimizers.Adam(learning_rate=1e-4),
        loss={ 'lbl': happy_meal(None, p['alpha'], p['beta'])},
        metrics={ 'lbl': custom.dsc() },
        experimental_run_tf_function=False
    )

    client.load_data_in_memory()

    model.fit(
        x=gen_train,
        epochs=40,
        steps_per_epoch=1000,
        validation_data=gen_valid,
        validation_steps=500,
        validation_freq=1,
        callbacks=[model_checkpoint_callback, reduce_lr_callback, early_stop_callback]
    )

    model.save(MODEL_NAME, overwrite=True, include_optimizer=False)
    return model

def test(model):
    paths = datasets.download(name='ct/organ-chest-abd')
    client = Client('{}/data/ymls/client-lung.yml'.format(paths['code']), configs={'batch': {'fold': 0}})

    def dice(y_true, y_pred, c=1, epsilon=1):
        true = y_true[..., 0] == c
        pred = np.argmax(y_pred, axis=-1) == c 
        A = np.count_nonzero(true & pred) * 2
        B = np.count_nonzero(true) + np.count_nonzero(pred) + epsilon
        
        return A / B


    _, test_valid = client.create_generators(test=True)
    dsc = []

    for x, y in test_valid:
        logits = model.predict(x)
        if type(logits) is dict:
            logits = logits['lbl'] 
        dsc.append(dice(y['lbl'], logits))
        
    # --- Create array
    dsc = np.array(dsc)
    print('Dice, mean: {}'.format(np.mean(dsc)))
    print('Dice, median: {}'.format(np.median(dsc)))

m = train()
#test(m)

